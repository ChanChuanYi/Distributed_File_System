#include <sys/types.h>#include <sys/socket.h>#include <sys/time.h>#include <netinet/in.h>#include <arpa/inet.h>#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <errno.h>#include <string.h>#include <netdb.h>#include <time.h>#include <signal.h>#include <fcntl.h>#include <netdb.h>#include "help.h"int main(int argc, char **argv){    if (argc != 3){        printf("usage: a.out <port-num> <forbidden-sites>");         exit(0);    }    int listenfd = 0,n,filesize=0,site_num=0;    socklen_t client_len;    int connfd = 0;    struct sockaddr_in serv_addr,client_address;    char recv[BUFFLEN],sendbuff[BUFFLEN],forheader[100];    char msgline[1024];    char flag;    time_t current =time(0);    site_num=load_forbidden_sites(argv);    listenfd = socket(AF_INET, SOCK_STREAM, 0);    printf("Socket retrieve success\n");    memset(&serv_addr, '0', sizeof(serv_addr));        serv_addr.sin_family = AF_INET;    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);    serv_addr.sin_port = htons(atoi(argv[1]));    bind(listenfd, (struct sockaddr*)&serv_addr,sizeof(serv_addr));    if(listen(listenfd, 10) == -1)    {        printf("Failed to listen\n");        return -1;    }    while(1)    {        int begin =0;        client_len = sizeof(client_address);        connfd = accept(listenfd, (struct sockaddr*)&client_address, &client_len);        if(connfd<0){            printf("%s\n","error accepting connection");            continue;        }        //This part is to get client's IP address.        char clientName[100];        char proxyName[100];        if(inet_ntop(AF_INET,&client_address.sin_addr.s_addr,clientName,sizeof(clientName))==NULL){            printf("Unable to get client address\n");         }         if(inet_ntop(AF_INET,&serv_addr.sin_addr.s_addr,proxyName,sizeof(proxyName))==NULL){            printf("Unable to get client address\n");         }                snprintf(forheader,sizeof(forheader),"Forwarded: for=<%s>; proto=http; by=<%s>",clientName,proxyName);        //        int child=fork();        if(child==0){                        int i=0,m=0;            char method[LINE];            char url[LINE];            char http[LINE];            char arg[LINE];            char host[LINE];            char time[LINE];            int hostfd;            char* port = "80";            struct addrinfo hints, *servinfo;            FILE *log_out;   //open log file and ready to write content            log_out = fopen("access.log","a+");            if(log_out==0) {                printf("%s\n","Unable to open log file");                continue;            }                       if ( (n = read(connfd, recv, BUFFLEN)) > 0){    			recv[n] = 0;            }    		 //printf("%s\n",recv);            if(n<=0){                send_error(400,"Bad Request","Bad Request",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }            //read first line of request            begin = get_msgline(begin,recv, msgline);            if(strlen(msgline)<=0){                send_error(400,"Bad Request","Bad Request",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }                        //parse first line            m = sscanf(msgline, "%s %s %s" ,method, url, http);            if(m!=3){                send_error(400,"Bad Request","Bad Request",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }            snprintf(time,sizeof(time),"%.24s",ctime(&current)); //The time format is from first assignment            fprintf(log_out,"<%s>",time);            fprintf(log_out, "<%s>",clientName);            fprintf(log_out,"<%s>",msgline);            printf("%s\n",msgline);            //check if method is valid            if(!(strcmp(method,"GET")==0||strcmp(method,"HEAD")==0))            {                send_error(405,"Method Not Allowed","You should only use GET and HEAD request",connfd);                fprintf(log_out, "%s\n","405 Method Not Allowed");                fclose(log_out);                exit(EXIT_FAILURE);            }            //read second line of request            begin = get_msgline(begin, recv, msgline);            if(strlen(msgline)<=0){                send_error(400,"Bad Request","Bad Request",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }            //parse second line            m = sscanf(msgline,"%s %s",arg,host);            if(m!=2){                send_error(400,"Bad Request","Bad Request",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }            //write request information received content to log file                        fprintf(log_out, "<Host: %s>",host);            fprintf(log_out, "<URL: %s>\n",url);                strncat(recv,forheader,strlen(forheader));            printf("%s\n",recv);            //need to check secure website here            if(is_forbidden(url,site_num)==0){                send_error(403,"Forbidden URL","The URL you entered is a forbidden website",connfd);                fprintf(log_out, "%s\n","403 Forbidden URL\n");                fclose(log_out);                exit(EXIT_FAILURE);            }            //send request to Host            memset(&hints,0,sizeof hints);   //initial address structure            hints.ai_family = AF_INET;            hints.ai_socktype = SOCK_STREAM;                        //convert URL to host IP address            if( (getaddrinfo(host,port,&hints,&servinfo)) !=0){                printf("PID:%d host:%s port:%s",(int)getpid(),host,port);            }                                  hostfd = socket(servinfo->ai_family,servinfo->ai_socktype,servinfo->ai_protocol);                        if(connect(hostfd,servinfo->ai_addr,servinfo->ai_addrlen) == -1){            printf("%s\n","error when connect to host");            exit(1);            }                        int host_write, host_read, client_write;                        host_write=write(hostfd,recv,BUFFLEN);            if(host_write<0){                send_error(500,"Server Error","Proxy Server failed to send request to host",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }            do{                memset(sendbuff,0,BUFFLEN);                host_read=read(hostfd,sendbuff,BUFFLEN);                client_write=write(connfd,sendbuff,host_read);            }while(host_read>0);            close(hostfd);            freeaddrinfo(servinfo);            fclose(log_out);            exit(EXIT_SUCCESS);                break;        }            close(connfd);       printf("%s\n","connection close");           }    return 0;}#include <sys/types.h>#include <sys/socket.h>#include <sys/time.h>#include <netinet/in.h>#include <arpa/inet.h>#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <errno.h>#include <string.h>#include <netdb.h>#include <time.h>#include <signal.h>#include <fcntl.h>#include <netdb.h>#include "help.h"int main(int argc, char **argv){    if (argc != 3){        printf("usage: a.out <port-num> <forbidden-sites>");         exit(0);    }    int listenfd = 0,n,filesize=0,site_num=0;    socklen_t client_len;    int connfd = 0;    struct sockaddr_in serv_addr,client_address;    char recv[BUFFLEN],sendbuff[BUFFLEN],forheader[100];    char msgline[1024];    char flag;    time_t current =time(0);    site_num=load_forbidden_sites(argv);    listenfd = socket(AF_INET, SOCK_STREAM, 0);    printf("Socket retrieve success\n");    memset(&serv_addr, '0', sizeof(serv_addr));        serv_addr.sin_family = AF_INET;    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);    serv_addr.sin_port = htons(atoi(argv[1]));    bind(listenfd, (struct sockaddr*)&serv_addr,sizeof(serv_addr));    if(listen(listenfd, 10) == -1)    {        printf("Failed to listen\n");        return -1;    }    while(1)    {        int begin =0;        client_len = sizeof(client_address);        connfd = accept(listenfd, (struct sockaddr*)&client_address, &client_len);        if(connfd<0){            printf("%s\n","error accepting connection");            continue;        }        //This part is to get client's IP address.        char clientName[100];        char proxyName[100];        if(inet_ntop(AF_INET,&client_address.sin_addr.s_addr,clientName,sizeof(clientName))==NULL){            printf("Unable to get client address\n");         }         if(inet_ntop(AF_INET,&serv_addr.sin_addr.s_addr,proxyName,sizeof(proxyName))==NULL){            printf("Unable to get client address\n");         }                snprintf(forheader,sizeof(forheader),"Forwarded: for=<%s>; proto=http; by=<%s>",clientName,proxyName);        //        int child=fork();        if(child==0){                        int i=0,m=0;            char method[LINE];            char url[LINE];            char http[LINE];            char arg[LINE];            char host[LINE];            char time[LINE];            int hostfd;            char* port = "80";            struct addrinfo hints, *servinfo;            FILE *log_out;   //open log file and ready to write content            log_out = fopen("access.log","a+");            if(log_out==0) {                printf("%s\n","Unable to open log file");                continue;            }                       if ( (n = read(connfd, recv, BUFFLEN)) > 0){    			recv[n] = 0;            }    		 //printf("%s\n",recv);            if(n<=0){                send_error(400,"Bad Request","Bad Request",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }            //read first line of request            begin = get_msgline(begin,recv, msgline);            if(strlen(msgline)<=0){                send_error(400,"Bad Request","Bad Request",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }                        //parse first line            m = sscanf(msgline, "%s %s %s" ,method, url, http);            if(m!=3){                send_error(400,"Bad Request","Bad Request",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }            snprintf(time,sizeof(time),"%.24s",ctime(&current)); //The time format is from first assignment            fprintf(log_out,"<%s>",time);            fprintf(log_out, "<%s>",clientName);            fprintf(log_out,"<%s>",msgline);            printf("%s\n",msgline);            //check if method is valid            if(!(strcmp(method,"GET")==0||strcmp(method,"HEAD")==0))            {                send_error(405,"Method Not Allowed","You should only use GET and HEAD request",connfd);                fprintf(log_out, "%s\n","405 Method Not Allowed");                fclose(log_out);                exit(EXIT_FAILURE);            }            //read second line of request            begin = get_msgline(begin, recv, msgline);            if(strlen(msgline)<=0){                send_error(400,"Bad Request","Bad Request",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }            //parse second line            m = sscanf(msgline,"%s %s",arg,host);            if(m!=2){                send_error(400,"Bad Request","Bad Request",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }            //write request information received content to log file                        fprintf(log_out, "<Host: %s>",host);            fprintf(log_out, "<URL: %s>\n",url);                strncat(recv,forheader,strlen(forheader));            printf("%s\n",recv);            //need to check secure website here            if(is_forbidden(url,site_num)==0){                send_error(403,"Forbidden URL","The URL you entered is a forbidden website",connfd);                fprintf(log_out, "%s\n","403 Forbidden URL\n");                fclose(log_out);                exit(EXIT_FAILURE);            }            //send request to Host            memset(&hints,0,sizeof hints);   //initial address structure            hints.ai_family = AF_INET;            hints.ai_socktype = SOCK_STREAM;                        //convert URL to host IP address            if( (getaddrinfo(host,port,&hints,&servinfo)) !=0){                printf("PID:%d host:%s port:%s",(int)getpid(),host,port);            }                                  hostfd = socket(servinfo->ai_family,servinfo->ai_socktype,servinfo->ai_protocol);                        if(connect(hostfd,servinfo->ai_addr,servinfo->ai_addrlen) == -1){            printf("%s\n","error when connect to host");            exit(1);            }                        int host_write, host_read, client_write;                        host_write=write(hostfd,recv,BUFFLEN);            if(host_write<0){                send_error(500,"Server Error","Proxy Server failed to send request to host",connfd);                fprintf(log_out, "%s\n","400 Bad Request");                fclose(log_out);                exit(EXIT_FAILURE);            }            do{                memset(sendbuff,0,BUFFLEN);                host_read=read(hostfd,sendbuff,BUFFLEN);                client_write=write(connfd,sendbuff,host_read);            }while(host_read>0);            close(hostfd);            freeaddrinfo(servinfo);            fclose(log_out);            exit(EXIT_SUCCESS);                break;        }            close(connfd);       printf("%s\n","connection close");           }    return 0;}